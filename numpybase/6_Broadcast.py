import numpy as np

# TODO 6. 广播
"""
在NumPy中，如果对两个数组实施加、减、乘、除等运算，参与运算的两个数组需形状相同。但实际上，NumPy具有“智能填充”功能，
当两个数组的形状不相同时，可扩充较小数组中的元素来匹配较大数组的形状，这种机制叫作广播（broadcasting）
这种广播机制，也称为张量自动扩展，它是一种轻量级的张量复制手段。
需要说明的是，对于大部分场景，广播机制仅仅在逻辑上改变了张量的尺寸，只待实际需要时才真正实现张量的赋值和扩展。
这种优化流程节省了大量计算资源，并由计算框架（如NumPy）隐式完成，用户无须关心实现细节。
"""
array14 = np.arange(1, 3)
print(array14)  # [1 2]
print(array14 + 5)  # [6 7]

"""
一个标量5通过广播被拉伸为一个尺寸为(3,)的数组。此时，拉伸后的张量尺寸与张量a的尺寸完全适配，
并且拉伸后的张量中的所有元素都复制拉伸前的元素，标量5就像被广播出去一样，传递到所有空缺的位置。
这种广播规则在二维数组中同样适用，不过是传播复制的“粒度”不一样罢了
"""
array15 = np.arange(3)
array16 = np.ones((3, 3))
print(array15)
print(array16)
print(array15 + array16)
"""
[0 1 2]

[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]

[[1. 2. 3.]
 [1. 2. 3.]
 [1. 2. 3.]]
"""

"""
此外，广播机制还支持对两个张量同时扩展，以适应对方张量的维度
"""
array17 = np.arange(3).reshape((3, 1))
print(array17)
"""
[[0]
 [1]
 [2]]
"""
array18 = np.arange(2).reshape((1, 2))
print(array18)  # [[0 1]]
print(array17 + array18)
"""
[[0 1]
 [1 2]
 [2 3]]
"""

"""
通过观察以上代码，我们可以得到NumPy的广播规则。
● 扩展维度：如果两个张量的尺寸不同，则NumPy的广播机制会为尺寸较小的张量添加一个轴（广播轴），使其维度信息与较大张量的相同。
● 复制数据：尺寸较小的张量沿着新添加的轴不断重复之前的元素，直至尺寸与较大的张量相同。
● 低维有1：如果两个张量的尺寸在任何维度上都不匹配，则需将某维度中尺寸为1的张量拉伸，以匹配另一个较大张量的尺寸。
如果两个张量在任何维度上尺寸都不一致，且两者均没有任何一个维度为1，则会出现广播错误，即广播不会发生。
也就是说，为了让广播操作能够顺利进行，广播操作的两个对象，它们某个维度上的尺寸，要么相等，要么为1。
"""
