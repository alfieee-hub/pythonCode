import numpy as np

# TODO 5. 操作数组元素
# TODO 5.1 通过索引访问数组元素
array10 = np.linspace(-0.5, 0.5, 11)
print(array10)  # [-0.5 -0.4 -0.3 -0.2 -0.1  0.   0.1  0.2  0.3  0.4  0.5]
print(array10[0])  # -0.5
print(array10[1])  # -0.4
array10[1] = -0.44
print(array10[1])  # 赋值为-0.44

array11 = np.linspace(1, 10, 10).reshape(2, 5)
print(array11)
"""
[[ 1.  2.  3.  4.  5.]
 [ 6.  7.  8.  9. 10.]]
"""
print(array11[0][1])  # 2.0
print(array11[1][2])  # 8.0
array11[1][2] = 2.2
print(array11[1][2])  # 赋值为2.2

# 事实上，NumPy提供了另一种更为简便的访问方式—把两个方括号合并，在一个方括号内分别给出两个维度信息，不同维度信息间用逗号（,）隔开。
print(array11[1,2])  # 8.0
array11[1,2] = 2.2
print(array11[1,2])  # 赋值为2.2
# TODO 5.2 NumPy中的切片访问
# 切片操作的核心是从原始数组中，按照给定规则提取出一个新的数组，对原始数组没有任何影响。
array12 = np.arange(10)
slice1 = slice(0, 9, 2)
array12_slice = array12[slice1]  # 我们通过slice()函数实例化一个切片参数，它表示从索引0开始到索引9停止，间隔为2，最后输出的结果为由0～9之间的偶数所组成的数组。
print(array12_slice)  # [0 2 4 6 8]
print(array12)  # [0 1 2 3 4 5 6 7 8 9]
"""
切片更为简便的使用方法是，直接通过冒号分隔切片参数，而无须使用slice()函数。
这时，切片规则通常是这样的：数组名[start:end:step]。
其中start表示起始索引（从0开始），end表示结束索引（至-1结束），step表示步长，步长为正时表示从左向右取值，步长为负时则反向取值。

需要注意的是，通过冒号分隔切片参数来进行切片操作时，假设方括号内索引值后面加上一个冒号，则表示从该索引开始，后面的所有项都将被提取。
如a[2:]表示从第3个元素开始直到最后的所有元素，全部提取（这里索引是从0开始的，下同）。

如果使用了两个参数，那么冒号前面的参数为start，后面的参数为stop，
提取出的数值为两个索引值之间的项（取值区间左闭右开，不包括结束索引），默认步长为1时可以省略。

如果start从0开始，start可省略；如果直到最末元素，end可省略；如果步长为1（取默认值），step可省略。

切片的步长step可取负值。当step=−1时，start: end: −1表示从start开始逆序读取至end结束（不包含end）。
考虑最特殊的一种例子，当切片方式为“::-1”时就完成了逆序读取。
"""
print(array12[0:9:2])  # [0 2 4 6 8]
print(array12[2:])  # [2 3 4 5 6 7 8 9]
print(array12[2:5])  # [2 3 4]
print(array12[::-1])  # [9 8 7 6 5 4 3 2 1 0]

# TODO 5.3 二维数组的转置与展平
# 通过transpose()方法将二维数组转置
array13 = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])
print(array13.transpose())
print(array13)  # 原始数组并没有发生变化
"""
[[1 4 7]
 [2 5 8]
 [3 6 9]]

 [[1 2 3]
 [4 5 6]
 [7 8 9]]
"""

# 将多维数组降维成一维数组
print(array13.ravel())  # [1 2 3 4 5 6 7 8 9]
print(array13)  # 原始数组未发生改变
# flatten()函数同样可以完成将多维数组展平成一维数组的操作。
# 不同于ravel()返回的是原始数组的视图，flatten()会重新分配内存，
# 完成一次从原始数据到新内存空间的深拷贝，但原始数组并没有发生任何变化。
print(array13.flatten())  # [1 2 3 4 5 6 7 8 9]

"""
事实上，我们还可以通过显式的变形来完成数组的降维.
我们重新定义了一个二维数组的形状，等号右边是一个元组，元组中第一个元素“1”，
表明新的数组形状是“1行”的，第二个元素“-1”表示列数由系统自动推导出来，
在上述代码中，它就是9，因为元素总数为9，其中一个维度为1，很容易推算出另外的维度信息。
对于N维数组，当N-1维尺寸确定后，用“-1”标记剩余维度，表示让系统推算剩余维度尺寸，
这种做法在高维数组操作中（如深度学习框架TensorFlow）很常用，因此该技巧值得掌握。
"""
array13.shape = (1, -1)
print(array13)  # [[1 2 3 4 5 6 7 8 9]]
