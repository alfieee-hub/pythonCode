import numpy as np

# TODO 3.NumPy数组中的运算
# TODO 3.1 向量运算
# 求上述两个列表对应元素的和。除了利用for循环，我们还可以用列表推导式来完成这个任务
# for循环方式
list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

# zip()函数将两个列表“并行打包”成一个个二元组，如果两个列表长度不同，zip 会以最短的那个为准（截断）。
list3 = [item1 + item2 for item1, item2 in zip(list1, list2)]
print(list3)  # [12, 14, 16, 18, 20, 22, 24, 26, 28, 30]

# numpy方式
list1_array = np.array(list1)
list2_array = np.array(list2)
list_sum = list1_array + list2_array  # 基于NumPy数组的加减乘除等各种数学运算都可以这么高效地完成！
print(list_sum)  # [12 14 16 18 20 22 24 26 28 30]

# TODO 3.2 算术运算
"""
NumPy吸纳了Fortran或MATLAB等语言的优点，只要操作数组的形状（维度）一致，
我们就可以很方便地对它们逐元素（element-wise）实施加、减、乘、除、取余、指数运算等操作。这些操作特别适合大规模的并行计算。
事实上，NumPy中还有很多好用的统计函数，如sum()、min()、max()、median()、mean()、average()、std()、var()
分别用于求和、求最小值、求最大值、求中位数、求平均数、求加权平均数、求标准差、求方差。
NumPy中还有很多常用的数学函数，如三角函数sin()、cos()和tan()等，
这也使得导入了NumPy后，Python宛若一个功能强大的科学计算器。
"""
# TODO 3.3 逐元素运算与张量点乘运算
# 一般来说，NumPy中的数组运算（如加减乘除等）都是“元素对元素”的运算，下面举例说明。
array3 = np.array([[1, 2], [3, 4]])
print(array3)
"""
[[1 2]
 [3 4]]
"""
array4 = np.ones((2, 2))
print(array4)
"""
[[1. 1.]
 [1. 1.]]
"""
print(array3 + array4)
"""
[[2. 3.]
 [4. 5.]]
"""
"""
这里的二维数组加法，遵循前面提到的“元素对元素”的原则，即数组a中第1行第1列的数值“1”，
和数组b中第1行第1列的数值“1”，相加得到2。数组a中第1行第2列的数值“2”，
和数组b中第1行第2列的数值“1”，相加得到3，一一对标，以此类推。
"""

"""
但是有一点和以往的数学经验相违背，二维数组（即矩阵）的乘法也是基于“元素对元素”原则实现的，
即二维数组a的第1行第1列的数值“1”，和二维数组b的第1行第1列的数值“1”相乘得到1。
二维数组a的第1行第2列的数值“2”，和二维数组b的第1行第2列的数值“1”相乘得到2，以此类推.
"""
print(array3 * array4)
"""
[[1. 2.]
 [3. 4.]]
"""

"""
对于这种“元素对元素”的乘法，NumPy提供了对应的函数multiply()。
显然，这种“元素对元素”的操作，要求两个操作对象的形状必须完全一致，否则“一对一”的操作无从谈起。
然而，数学意义上的矩阵乘法并不是这样的，不同形状的矩阵是可以进行乘法运算的，只要满足第一个矩阵的列数与第二个矩阵的行数相同即可。
为了区分“元素对元素”式的矩阵乘法，NumPy给它取了一个新的名称dot（点乘）。
"""
# 使用dot()函数对二维数组进行点乘运算
array5 = np.arange(9).reshape((3, 3))
array6 = np.ones(shape=(3, 2))
print(array5)
print(array6)
"""
[[0 1 2]
 [3 4 5]
 [6 7 8]]

[[1. 1.]
 [1. 1.]
 [1. 1.]]
"""
print(np.dot(array5, array6))
"""
[[ 3.  3.]
 [12. 12.]
 [21. 21.]]
"""
