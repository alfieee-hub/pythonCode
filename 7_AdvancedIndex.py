import numpy as np

# TODO 7. NumPy数组的高级索引
# TODO 7.1 花式索引
"""
索引要么是一个值，要么是一片值（即切片访问）。如果索引只是一个值，那么自然只能访问一个数组元素。
如果索引基于切片方法，那么被访问的数组元素或连续分布，或通过设置步长有规律地间隔分布。
如果我们想一次性访问数组中的多个元素，而它们又没什么规律可循，该怎么呢？
“花式”索引（Fancy Indexing）就是用来解决这个问题的。

“花式”索引是指，将多个需要访问元素的索引汇集起来，构成一个整型数组，然后把这个内含索引的数组，
整体作为目标数组的索引，这样就能一次性地读取多个“杂乱无序”甚至重复的数组元素。
由于这种读取数组元素的方式有些花哨，故称“花式”索引，又因为索引都是整数，亦有文献称之为整数索引。
"""
array1 = np.array([23, 45, 1, 678, 45, 78])
array2 = array1[[1, 5, 3]]  # 可以把内层括号的数组[0,8,7,7]视为一个列表，外层方括号内的索引其实就是一个对象—包含索引元素的列表。

# NumPy按照这个列表中的元素值，按图索骥，便可提取对应索引位置的元素。
print(array1)  # [ 23  45   1 678  45  78]
print(array2)  # [ 45  78 678]

"""
前面提到的花式索引，其处理的目标对象是一维数组，如果需要处理的对象变成二维数组该怎么办呢？
如果还是简单套用一维数组的花式索引读取方式，程序并不会报错，但表示的含义就迥然不同了。
这些二维数组中的花式索引特指“行”索引.
"""
array3 = np.arange(25).reshape(5, 5)
print(array3)
row_index = [0, 3, 4]
print(array3[row_index])
col_index = [0, 2, 4]

# 访问二维数组的不同列时，需要用冒号（:）添加一个维度，即two_dim_array[:, col_index]，它表示所有行的数据都涉及，
# 但列的访问范围由col_index来限定。这里冒号的用法来自数组切片.
print(array3[:, col_index])  # 列索引

# 举例来说，如果我们想访问二维数组two_dim_array的第2行（从0开始计数）的第0列、第3列和第1列（访问顺序故意打乱）
print(array3[2, [0, 3, 1]])  # [10 13 11]
"""
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]

 [[ 0  1  2  3  4]
 [15 16 17 18 19]
 [20 21 22 23 24]]

[[ 0  2  4]
 [ 5  7  9]
 [10 12 14]
 [15 17 19]
 [20 22 24]]
"""

"""
访问二维数组的元素
我们可以在内层括号中提供两个花式索引（都以数组形式存在），一个花式索引对应行坐标，一个花式索引对应列坐标，
这样系统会自动两两配对，构成一个二维数组坐标，然后一一获取坐标点位置所指引的数值
"""
print(array3[row_index, col_index])
"""
[10 13 11]
[ 0 17 24]
"""
# TODO 7.2 布尔索引
"""
事实上，相比于“花式”索引，布尔索引的功能也不逊色，用处也非常广泛。
前面的例子已经给我们提供了部分感性的认识，
通过布尔索引，我们可以有选择性地提取数组中感兴趣的行或列（对应位置为True的保留，反之则过滤）。
"""
array4 = np.arange(4).reshape(2, 2)
print(array4[array4 > 1])
print(array4 > 1)
"""
 [2 3]

[[False False]
 [ True  True]]
"""
